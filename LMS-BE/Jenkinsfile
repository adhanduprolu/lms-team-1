pipeline {
    agent any

    stages {
        stage('Remove Old Database Container') {
            steps {
                script {
                    try {
                        def mysqlContainerStatus = sh(script: 'docker inspect -f {{.State.Running}} mysql', returnStatus: true)
                        if (mysqlContainerStatus == 0) {
                            sh 'docker stop mysql'
                            sh 'docker rm mysql'
                            echo 'Old MySQL container removed'
                        } else {
                            echo 'No existing MySQL container found'
                        }
                    } catch (Exception e) {
                        echo "Error: ${e.message}"
                    }
                }
            }
        }

        stage('Create Database Container') {
            steps {
                script {
                    try {
                        def mysqlContainerStatus = sh(script: 'docker inspect -f {{.State.Running}} mysql', returnStatus: true)
                        if (mysqlContainerStatus == 0) {
                            echo 'MySQL container already exists'
                        } else {
                            sh 'docker run -dt --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=Qwerty@123 mysql:latest'
                        }
                    } catch (Exception e) {
                        echo "Error: ${e.message}"
                    }
                }
            }
        }

        stage('Remove Old Backend Container') {
            steps {
                script {
                    sh 'docker stop backend || true'
                    sh 'docker rm backend || true'
                    echo 'Old backend container removed'
                }
            }
        }

        stage('Create Backend Container') {
            steps {
                script {
                    dir('LMS-BE') {
                        try {
                            sh 'docker build -t backend .'
                            sh 'docker run -dt --name backend -p 8080:8080 backend'
                            echo 'Backend container created'
                        } catch (Exception e) {
                            error "Error building or running the backend container: ${e.message}"
                        }
                    }
                }
            }
        }
    }
}
